color = [
0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xF7BE, 0xF7BE, 0xF79E, 0xF79E, 0xEF7D, 0xEF7D,
0xEF5D, 0xEF5D, 0xE73C, 0xE73C, 0xE71C, 0xE71C, 0xDEFB, 0xDEFB, 0xDEDB, 0xDEDB,
0xD6BA, 0xD6BA, 0xD69A, 0xD69A, 0xCE79, 0xCE79, 0xCE59, 0xCE59, 0xC638, 0xC638,
0xC618, 0xC618, 0xBDF7, 0xBDF7, 0xBDD7, 0xBDD7, 0xB5B6, 0xB5B6, 0xB596, 0xB596,
0xAD75, 0xAD75, 0xAD55, 0xAD55, 0xA534, 0xA534, 0xA514, 0xA514, 0x9CF3, 0x9CF3,
0x9CD3, 0x9CD3, 0x94B2, 0x94B2, 0x9492, 0x9492, 0x8C71, 0x8C71, 0x8C51, 0x8C51,
0x8430, 0x8430, 0x8410, 0x8410, 0x7BEF, 0x7BEF, 0x7BCF, 0x7BCF, 0x73AE, 0x73AE,
0x738E, 0x738E, 0x6B6D, 0x6B6D, 0x6B4D, 0x6B4D, 0x632C, 0x632C, 0x630C, 0x630C,
0x5AEB, 0x5AEB, 0x5ACB, 0x5ACB, 0x52AA, 0x52AA, 0x528A, 0x528A, 0x4A69, 0x4A69,
0x4A49, 0x4A49, 0x4228, 0x4228, 0x4208, 0x4208, 0x39E7, 0x39E7, 0x39C7, 0x39C7,
0x31A6, 0x31A6, 0x3186, 0x3186, 0x2965, 0x2965, 0x2945, 0x2945, 0x2124, 0x2124,
0x2104, 0x2104, 0x18E3, 0x18E3, 0x18C3, 0x18C3, 0x10A2, 0x10A2, 0x1082, 0x1082,
0x0861, 0x0861, 0x0841, 0x0841, 0x0020, 0x0020, 0x0000, 0x0000, 0x0001, 0x0002,
0x0003, 0x0003, 0x0804, 0x0805, 0x0806, 0x0807, 0x1008, 0x1009, 0x100A, 0x100B,
0x180C, 0x180C, 0x180D, 0x180E, 0x200F, 0x280F, 0x280F, 0x300F, 0x380F, 0x380F,
0x400F, 0x400F, 0x4810, 0x5010, 0x5010, 0x5810, 0x6010, 0x6010, 0x6810, 0x6810,
0x7011, 0x7811, 0x7811, 0x8011, 0x8011, 0x8811, 0x9011, 0x9031, 0x9831, 0x9831,
0xA031, 0xA031, 0xA831, 0xB031, 0xB031, 0xB831, 0xB851, 0xB870, 0xC08F, 0xC08F,
0xC0AE, 0xC8CD, 0xC8ED, 0xC8EC, 0xC90B, 0xD12B, 0xD14A, 0xD14A, 0xD969, 0xD988,
0xD9A8, 0xD9A7, 0xE1C6, 0xE1E5, 0xE205, 0xE205, 0xE224, 0xE244, 0xE264, 0xE284,
0xE2A3, 0xEAC3, 0xEAE3, 0xEAE2, 0xEB02, 0xEB22, 0xEB41, 0xEB61, 0xEB81, 0xF3A1,
0xF3A1, 0xF3C1, 0xF3E1, 0xF401, 0xF421, 0xF441, 0xF461, 0xF481, 0xF4A1, 0xF4C1,
0xF4E1, 0xF501, 0xF501, 0xF521, 0xF541, 0xFD61, 0xFD81, 0xFDA2, 0xFDC2, 0xFDE2,
0xFE02, 0xFE22, 0xFE22, 0xFE42, 0xFE63, 0xFE83, 0xFEA3, 0xFEC3, 0xFEE3, 0xFF03,
0xFF04, 0xFF26, 0xFF28, 0xFF4A, 0xFF4B, 0xFF6D, 0xFF6F, 0xFF91, 0xFF92, 0xFFB4,
0xFFB6, 0xFFD8, 0xFFD9, 0xFFDB, 0xFFFD, 0xFFE3,
]

result = []
i = 0
while((i < len(color)) is True):
    ri = (color[i] & 0xF800) >> 8;
    gi = (color[i] & 0x07E0) >> 3;
    bi = (color[i] & 0x001F) << 3;
    x = 0
    for j in range(i, len(color)):
        if color[j] is not color[i]:
            break
        else:
            x += 1
    if x == 0:
        result.append("0x%02X, 0x%02X, 0x%02X, 0x00," %(bi, gi, ri))
    else:
        rj = (color[j] & 0xF800) >> 8;
        gj = (color[j] & 0x07E0) >> 3;
        bj = (color[j] & 0x001F) << 3;
        dr = (rj - ri) / x
        dg = (gj - gi) / x
        db = (bj - bi) / x
        for k in range(0, x):
            result.append("0x%02X, 0x%02X, 0x%02X, 0x00," %(int(bi + db * k), int(gi + dg * k), int(ri + dr * k)))
        i += x
# for i in range(0, 256):
#     result.append("0x%02X, 0x%02X, 0x%02X, 0x00," %(i, i, i))
result.reverse()
for x in result:
    print(x)

    